// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    
    public class Binding_a167402e36850884aa7ce3d374cd6c77_880aae33_d8da_49c2_b9d4_e0c68eb7a369 : UIntBinding
    {   
        private global::Flower CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Flower)UnityComponent;
        }

        public override string CoherenceComponentName => "Flower_a167402e36850884aa7ce3d374cd6c77_Flower_6689584802229134021";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override System.UInt32 Value
        {
            get { return (System.UInt32)(CastedUnityComponent.timePlanted); }
            set { CastedUnityComponent.timePlanted = (System.UInt32)(value); }
        }

        protected override System.UInt32 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((Flower_a167402e36850884aa7ce3d374cd6c77_Flower_6689584802229134021)coherenceComponent).timePlanted;
            
            return value;
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
        {
            var update = (Flower_a167402e36850884aa7ce3d374cd6c77_Flower_6689584802229134021)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.timePlanted = Value;
            }
            else
            {
                update.timePlanted = GetInterpolatedAt(time);
            }
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new Flower_a167402e36850884aa7ce3d374cd6c77_Flower_6689584802229134021();
        }    
    }
    
    public class Binding_a167402e36850884aa7ce3d374cd6c77_ccfa2ea5_f634_431f_bc33_62f7da4de3ac : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override UnityEngine.Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }
            
            return value;
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
        {
            var update = (WorldPosition)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(time);
            }
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    
    public class Binding_a167402e36850884aa7ce3d374cd6c77_fad1d0ce_4867_4d6c_a75d_33d243736b45 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override UnityEngine.Quaternion ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;
            
            return value;
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(time);
            }
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }

    public class CoherenceSyncFlower_a167402e36850884aa7ce3d374cd6c77 : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSyncFlower_a167402e36850884aa7ce3d374cd6c77>();
        
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
            ["880aae33-d8da-49c2-b9d4-e0c68eb7a369"] = new Binding_a167402e36850884aa7ce3d374cd6c77_880aae33_d8da_49c2_b9d4_e0c68eb7a369(),
            ["ccfa2ea5-f634-431f-bc33-62f7da4de3ac"] = new Binding_a167402e36850884aa7ce3d374cd6c77_ccfa2ea5_f634_431f_bc33_62f7da4de3ac(),
            ["fad1d0ce-4867-4d6c-a75d-33d243736b45"] = new Binding_a167402e36850884aa7ce3d374cd6c77_fad1d0ce_4867_4d6c_a75d_33d243736b45(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSyncFlower_a167402e36850884aa7ce3d374cd6c77()
        {
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                default:
                    logger.Warning($"CoherenceSyncFlower_a167402e36850884aa7ce3d374cd6c77 Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName)
        {
            if (!usesLodsAtRuntime)
            {
                return null;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                var components = new List<ICoherenceComponentData>()
                {
                    new ArchetypeComponent
                    {
                        index = archetypeIndex
                    }
                };

                return components;
            }
    
            logger.Warning($"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
            
            return null;
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSyncFlower_a167402e36850884aa7ce3d374cd6c77>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }

}