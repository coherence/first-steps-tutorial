// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    
    public struct Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199 : ICoherenceComponentData
    {
        public static uint currentHatMask => 0b00000000000000000000000000000001;
        public System.Int32 currentHat;
        public static uint currentHairStyleMask => 0b00000000000000000000000000000010;
        public System.Int32 currentHairStyle;
        public static uint currentFacialHairMask => 0b00000000000000000000000000000100;
        public System.Int32 currentFacialHair;
        public static uint currentBackpackMask => 0b00000000000000000000000000001000;
        public System.Int32 currentBackpack;
        public static uint currentSkinToneMask => 0b00000000000000000000000000010000;
        public System.Int32 currentSkinTone;
        
        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 159;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000011111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;
        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;  
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;   
        }
        
        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;
        public AbsoluteSimulationFrame Frame;
        
        private static readonly System.Int32 _currentHat_Min = -2;
        private static readonly System.Int32 _currentHat_Max = 3;
        private static readonly System.Int32 _currentHairStyle_Min = -2;
        private static readonly System.Int32 _currentHairStyle_Max = 3;
        private static readonly System.Int32 _currentFacialHair_Min = -2;
        private static readonly System.Int32 _currentFacialHair_Max = 3;
        private static readonly System.Int32 _currentBackpack_Min = -2;
        private static readonly System.Int32 _currentBackpack_Max = 3;
        private static readonly System.Int32 _currentSkinTone_Min = -2;
        private static readonly System.Int32 _currentSkinTone_Max = 20;
    
        public void SetSimulationFrame(AbsoluteSimulationFrame frame)
        {
            Frame = frame;
        }
        
        public AbsoluteSimulationFrame GetSimulationFrame() => Frame;
        
        public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
        {
            var other = (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199)data;

            FieldsMask |= mask;
            StoppedMask &= ~(mask);

            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                currentHat = other.currentHat;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                currentHairStyle = other.currentHairStyle;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                currentFacialHair = other.currentFacialHair;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                currentBackpack = other.currentBackpack;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                currentSkinTone = other.currentSkinTone;
            }
            
            mask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }
        
        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }
        
        public static uint Serialize(Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199 data, uint mask, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 5);
            }

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.currentHat, _currentHat_Min, _currentHat_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentHat", logger);
                
                data.currentHat = Coherence.Utils.Bounds.Clamp(data.currentHat, _currentHat_Min, _currentHat_Max);
            
                var fieldValue = data.currentHat;
            

            
                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentHairStyle", logger);
                
                data.currentHairStyle = Coherence.Utils.Bounds.Clamp(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max);
            
                var fieldValue = data.currentHairStyle;
            

            
                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentFacialHair", logger);
                
                data.currentFacialHair = Coherence.Utils.Bounds.Clamp(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max);
            
                var fieldValue = data.currentFacialHair;
            

            
                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentBackpack", logger);
                
                data.currentBackpack = Coherence.Utils.Bounds.Clamp(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max);
            
                var fieldValue = data.currentBackpack;
            

            
                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentSkinTone", logger);
                
                data.currentSkinTone = Coherence.Utils.Bounds.Clamp(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max);
            
                var fieldValue = data.currentSkinTone;
            

            
                bitStream.WriteIntegerRange(fieldValue, 5, -2);
            }
            
            mask >>= 1;
          
            return mask;
        }
        
        public static (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199, uint) Deserialize(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var mask = (uint)0;
            var val = new Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199();
            if (bitStream.ReadMask())
            {
                val.currentHat = bitStream.ReadIntegerRange(3, -2);
                mask |= currentHatMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
                mask |= currentHairStyleMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
                mask |= currentFacialHairMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
                mask |= currentBackpackMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
                mask |= currentSkinToneMask;
            }
                    
            val.FieldsMask = mask;
            val.StoppedMask = stoppedMask;

            return (val, mask);
        }
        
        public static (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199, uint) DeserializeArchetypePlayer_cd9bcc1feead9419fac0c5981ce85c23_Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199_LOD0(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var mask = (uint)0;
            var val = new Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199();
            if (bitStream.ReadMask())
            {
                val.currentHat = bitStream.ReadIntegerRange(3, -2);
                mask |= currentHatMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
                mask |= currentHairStyleMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
                mask |= currentFacialHairMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
                mask |= currentBackpackMask;
            }
            if (bitStream.ReadMask())
            {
                val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
                mask |= currentSkinToneMask;
            }
                        
            val.FieldsMask = mask;
            val.StoppedMask = mask;
            
            return (val, mask);
        }
        
        public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
        {
            var last = lastSent as Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199?;
            
        }

        public override string ToString()
        {
            return $"Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199(currentHat: { currentHat }, currentHairStyle: { currentHairStyle }, currentFacialHair: { currentFacialHair }, currentBackpack: { currentBackpack }, currentSkinTone: { currentSkinTone }, Mask: {System.Convert.ToString(FieldsMask, 2).PadLeft(5, '0')}), Stopped: {System.Convert.ToString(StoppedMask, 2).PadLeft(5, '0')})";
        }
    }
    

}