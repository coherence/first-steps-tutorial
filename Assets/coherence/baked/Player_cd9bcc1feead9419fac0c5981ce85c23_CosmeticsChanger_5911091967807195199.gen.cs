// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199 : ICoherenceComponentData
	{
		public int currentHat;
		public int currentHairStyle;
		public int currentFacialHair;
		public int currentBackpack;
		public int currentSkinTone;

		public override string ToString()
		{
			return $"Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199(currentHat: {currentHat}, currentHairStyle: {currentHairStyle}, currentFacialHair: {currentFacialHair}, currentBackpack: {currentBackpack}, currentSkinTone: {currentSkinTone})";
		}

		public uint GetComponentType() => Definition.InternalPlayer_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199;

		public const int order = 0;

		public uint FieldsMask => 0b00000000000000000000000000011111;

		public int GetComponentOrder() => order;
		public bool IsSendOrdered() { return false; }

		public AbsoluteSimulationFrame Frame;
	
		private static readonly int _currentHat_Min = -2;
		private static readonly int _currentHat_Max = 3;
		private static readonly int _currentHairStyle_Min = -2;
		private static readonly int _currentHairStyle_Max = 3;
		private static readonly int _currentFacialHair_Min = -2;
		private static readonly int _currentFacialHair_Max = 3;
		private static readonly int _currentBackpack_Min = -2;
		private static readonly int _currentBackpack_Max = 3;
		private static readonly int _currentSkinTone_Min = -2;
		private static readonly int _currentSkinTone_Max = 20;

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				currentHat = other.currentHat;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				currentHairStyle = other.currentHairStyle;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				currentFacialHair = other.currentFacialHair;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				currentBackpack = other.currentBackpack;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				currentSkinTone = other.currentSkinTone;
			}
			mask >>= 1;
			return this;
		}

		public uint DiffWith(ICoherenceComponentData data)
		{
			throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");

		}

		public static uint Serialize(Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.currentHat, _currentHat_Min, _currentHat_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentHat");
				data.currentHat = Coherence.Utils.Bounds.Clamp(data.currentHat, _currentHat_Min, _currentHat_Max);
				var fieldValue = data.currentHat;

				bitStream.WriteIntegerRange(fieldValue, 3, -2);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentHairStyle");
				data.currentHairStyle = Coherence.Utils.Bounds.Clamp(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max);
				var fieldValue = data.currentHairStyle;

				bitStream.WriteIntegerRange(fieldValue, 3, -2);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentFacialHair");
				data.currentFacialHair = Coherence.Utils.Bounds.Clamp(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max);
				var fieldValue = data.currentFacialHair;

				bitStream.WriteIntegerRange(fieldValue, 3, -2);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentBackpack");
				data.currentBackpack = Coherence.Utils.Bounds.Clamp(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max);
				var fieldValue = data.currentBackpack;

				bitStream.WriteIntegerRange(fieldValue, 3, -2);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max, "Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199.currentSkinTone");
				data.currentSkinTone = Coherence.Utils.Bounds.Clamp(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max);
				var fieldValue = data.currentSkinTone;

				bitStream.WriteIntegerRange(fieldValue, 5, -2);
			}
			mask >>= 1;

			return mask;
		}

		public static (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199, uint) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199();
	
			if (bitStream.ReadMask())
			{
				val.currentHat = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
				mask |= 0b00000000000000000000000000010000;
			}
			return (val, mask);
		}
		public static (Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199, uint) DeserializeArchetypePlayer_cd9bcc1feead9419fac0c5981ce85c23_Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199();
			if (bitStream.ReadMask())
			{
				val.currentHat = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
				mask |= 0b00000000000000000000000000010000;
			}

			return (val, mask);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as Player_cd9bcc1feead9419fac0c5981ce85c23_CosmeticsChanger_5911091967807195199?;
	
		}
	}
}