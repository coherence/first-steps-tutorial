// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 currentHat;
            [FieldOffset(4)]
            public System.Int32 currentHairStyle;
            [FieldOffset(8)]
            public System.Int32 currentFacialHair;
            [FieldOffset(12)]
            public System.Int32 currentBackpack;
            [FieldOffset(16)]
            public System.Int32 currentSkinTone;
        }

        public static unsafe _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 20) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for component with ID 169");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 169");
            }

            var orig = new _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199();

            var comp = (Interop*)data;

            orig.currentHat = comp->currentHat;
            orig.currentHairStyle = comp->currentHairStyle;
            orig.currentFacialHair = comp->currentFacialHair;
            orig.currentBackpack = comp->currentBackpack;
            orig.currentSkinTone = comp->currentSkinTone;

            return orig;
        }

        public static unsafe _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 FromInteropArchetype_cd9bcc1feead9419fac0c5981ce85c23__cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199_LOD0(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 20) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for component with ID 201");
            }

                
            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 201");
            }

            var orig = new _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199();

            var comp = (Interop*)data;

            orig.currentHat = comp->currentHat;
            orig.currentHairStyle = comp->currentHairStyle;
            orig.currentFacialHair = comp->currentFacialHair;
            orig.currentBackpack = comp->currentBackpack;
            orig.currentSkinTone = comp->currentSkinTone;

            return orig;
        }

        public static uint currentHatMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame currentHatSimulationFrame;
        public System.Int32 currentHat;
        public static uint currentHairStyleMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame currentHairStyleSimulationFrame;
        public System.Int32 currentHairStyle;
        public static uint currentFacialHairMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame currentFacialHairSimulationFrame;
        public System.Int32 currentFacialHair;
        public static uint currentBackpackMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame currentBackpackSimulationFrame;
        public System.Int32 currentBackpack;
        public static uint currentSkinToneMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame currentSkinToneSimulationFrame;
        public System.Int32 currentSkinTone;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 169;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000011111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 5;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _currentHat_Min = -2;
        private static readonly System.Int32 _currentHat_Max = 3;
        private static readonly System.Int32 _currentHairStyle_Min = -2;
        private static readonly System.Int32 _currentHairStyle_Max = 3;
        private static readonly System.Int32 _currentFacialHair_Min = -2;
        private static readonly System.Int32 _currentFacialHair_Max = 3;
        private static readonly System.Int32 _currentBackpack_Min = -2;
        private static readonly System.Int32 _currentBackpack_Max = 3;
        private static readonly System.Int32 _currentSkinTone_Min = -2;
        private static readonly System.Int32 _currentSkinTone_Max = 20;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                currentHatSimulationFrame = other.currentHatSimulationFrame;
                currentHat = other.currentHat;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                currentHairStyleSimulationFrame = other.currentHairStyleSimulationFrame;
                currentHairStyle = other.currentHairStyle;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                currentFacialHairSimulationFrame = other.currentFacialHairSimulationFrame;
                currentFacialHair = other.currentFacialHair;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                currentBackpackSimulationFrame = other.currentBackpackSimulationFrame;
                currentBackpack = other.currentBackpack;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                currentSkinToneSimulationFrame = other.currentSkinToneSimulationFrame;
                currentSkinTone = other.currentSkinTone;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 5);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.currentHat, _currentHat_Min, _currentHat_Max, "_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199.currentHat", logger);

                data.currentHat = Coherence.Utils.Bounds.Clamp(data.currentHat, _currentHat_Min, _currentHat_Max);

                var fieldValue = data.currentHat;



                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max, "_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199.currentHairStyle", logger);

                data.currentHairStyle = Coherence.Utils.Bounds.Clamp(data.currentHairStyle, _currentHairStyle_Min, _currentHairStyle_Max);

                var fieldValue = data.currentHairStyle;



                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max, "_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199.currentFacialHair", logger);

                data.currentFacialHair = Coherence.Utils.Bounds.Clamp(data.currentFacialHair, _currentFacialHair_Min, _currentFacialHair_Max);

                var fieldValue = data.currentFacialHair;



                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max, "_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199.currentBackpack", logger);

                data.currentBackpack = Coherence.Utils.Bounds.Clamp(data.currentBackpack, _currentBackpack_Min, _currentBackpack_Max);

                var fieldValue = data.currentBackpack;



                bitStream.WriteIntegerRange(fieldValue, 3, -2);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max, "_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199.currentSkinTone", logger);

                data.currentSkinTone = Coherence.Utils.Bounds.Clamp(data.currentSkinTone, _currentSkinTone_Min, _currentSkinTone_Max);

                var fieldValue = data.currentSkinTone;



                bitStream.WriteIntegerRange(fieldValue, 5, -2);
            }

            mask >>= 1;

            return mask;
        }

        public static _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var val = new _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199();
            if (bitStream.ReadMask())
            {

                val.currentHat = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentHatMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentHairStyleMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentFacialHairMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentBackpackMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
                val.FieldsMask |= currentSkinToneMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public static _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199 DeserializeArchetype_cd9bcc1feead9419fac0c5981ce85c23__cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199_LOD0(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var val = new _cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199();
            if (bitStream.ReadMask())
            {

                val.currentHat = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentHatMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentHairStyle = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentHairStyleMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentFacialHair = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentFacialHairMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentBackpack = bitStream.ReadIntegerRange(3, -2);
                val.FieldsMask |= currentBackpackMask;
            }
            if (bitStream.ReadMask())
            {

                val.currentSkinTone = bitStream.ReadIntegerRange(5, -2);
                val.FieldsMask |= currentSkinToneMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public override string ToString()
        {
            return $"_cd9bcc1feead9419fac0c5981ce85c23_5911091967807195199(" +
                $" currentHat: { currentHat }" +
                $" currentHairStyle: { currentHairStyle }" +
                $" currentFacialHair: { currentFacialHair }" +
                $" currentBackpack: { currentBackpack }" +
                $" currentSkinTone: { currentSkinTone }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(5, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(5, '0') })";
        }
    }


}