// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using UnityEngine;
    using Coherence.Toolkit;
    using System;
    using Coherence.ProtocolDef;
    using ConnectionType = Coherence.Connection.ConnectionType;
    using ClientID = Coherence.Connection.ClientID;
    using Coherence.Entities;
    public class CoherenceBridgeImpl
    {
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        static void OnRuntimeMethodLoad()
        {
            Impl.AssetId = AssetId;
            Impl.GetSpawnInfo = GetSpawnInfo;
            Impl.GetRootDefinition = GetRootDefinition;
            Impl.CreateConnectionSceneUpdateInternal = CreateConnectionSceneUpdateInternal;
        }
    
        private static uint AssetId()
        {
            return Definition.InternalAssetId;
        }
    
        static (bool, SpawnInfo) GetSpawnInfo(IClient client, EntityUpdate entityUpdate)
        {
            var info = new SpawnInfo();
            var gotPosition = false;
            var gotUnityAsset = false;
    
            foreach (var comp in entityUpdate.Components.Updates.Store)
            {
                switch(comp.Value.Data)
                {
                    case WorldPosition pos:
                        info.position = pos.value;
                        gotPosition = true;
                        break;
                    case WorldOrientation rot:
                        info.rotation = rot.value;
                        break;
                    case AssetId assetId:
                        if (CoherenceSyncConfigManager.GetConfigFromAssetId(assetId.value) != null)
                        {
                            info.assetId = assetId.value;
                            info.isFromGroup = assetId.isFromGroup;
                            gotUnityAsset = true;
                        }
                        break;
                    case ConnectedEntity connectedEntity:
                        info.connectedEntity = connectedEntity.value;
                        break;
                    case Connection con:
                        info.clientId = (ClientID)con.id;
                        info.connectionType = (ConnectionType)con.type;
                        break;
                    case UniqueID uid:
                        info.uniqueId = uid.uuid;
                        break;
                }
            }
    
            var shouldSpawn = (gotPosition && gotUnityAsset) || info.clientId.HasValue;
    
            return (shouldSpawn, info);
        }
    
        private static IDefinition GetRootDefinition()
        {
            return new Definition();
        }
    
        private static ICoherenceComponentData CreateConnectionSceneUpdateInternal(uint sceneIndex)
        {
            var update = new ConnectionScene()
            {
                value = sceneIndex,
                FieldsMask = 0b1,
            };
    
            return update;
        }
    }

}