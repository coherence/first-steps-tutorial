// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using UnityEngine;
    using Coherence.Entities;
    using Toolkit;
    
    public class CoherenceLiveQueryImpl
    {
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        static void OnRuntimeMethodLoad()
        {
            Impl.CreateLiveQuery = CreateLiveQuery;
            Impl.UpdateLiveQuery = UpdateLiveQuery;
        }

        private static Entity CreateLiveQuery(IClient client, float radius, Vector3 pos) {
            var components = new ICoherenceComponentData[] {
                new WorldPosition
                {
                    value = pos,
                    FieldsMask = 0b1,
                },
                new WorldPositionQuery
                {
                    position = pos,
                    radius = radius,
                    FieldsMask = 0b11,
                }
            };

            return client.CreateEntity(components, false);
        }

        private static void UpdateLiveQuery(IClient client, Entity liveQuery, float radius, Vector3 pos)
        {
            var newWorldPositionQuery = new WorldPositionQuery
            {
                position = pos,
                radius = radius,
                FieldsMask = 0b11,
            };

            var components = new ICoherenceComponentData[]
            {
                newWorldPositionQuery,
            };

            var masks = new uint[]
            {
                0b11,
            };

            client.UpdateComponents(liveQuery, components, masks);
        }
    }

}