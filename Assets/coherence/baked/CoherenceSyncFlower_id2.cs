// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_a167402e36850884aa7ce3d374cd6c77_ccfa2ea5_f634_431f_bc33_62f7da4de3ac : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			return update.value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_a167402e36850884aa7ce3d374cd6c77_fad1d0ce_4867_4d6c_a75d_33d243736b45 : RotationBinding
	{
		public override string CoherenceComponentName => "WorldOrientation";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Quaternion Value
		{
			get => (Quaternion)(UnityEngine.Quaternion)(coherenceSync.coherenceRotation);
			set => coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value);
		}

		protected override Quaternion ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldOrientation)coherenceComponent;
			return update.value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldOrientation)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldOrientation();
		}
	}

	public class Binding_a167402e36850884aa7ce3d374cd6c77_880aae33_d8da_49c2_b9d4_e0c68eb7a369 : UIntBinding
	{
		private Flower CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (Flower)UnityComponent;
		}
		public override string CoherenceComponentName => "Flower_id2_Flower_6689584802229134021";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override uint Value
		{
			get => (uint)(System.UInt32)(CastedUnityComponent.timePlanted);
			set => CastedUnityComponent.timePlanted = (System.UInt32)(value);
		}

		protected override uint ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (Flower_id2_Flower_6689584802229134021)coherenceComponent;
			return update.timePlanted;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (Flower_id2_Flower_6689584802229134021)coherenceComponent;
			update.timePlanted = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new Flower_id2_Flower_6689584802229134021();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'Flower' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncFlower_id2 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncFlower_id2>();
			if (coherenceSync.TryGetBindingByGuid("ccfa2ea5-f634-431f-bc33-62f7da4de3ac", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_a167402e36850884aa7ce3d374cd6c77_ccfa2ea5_f634_431f_bc33_62f7da4de3ac();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
			if (coherenceSync.TryGetBindingByGuid("fad1d0ce-4867-4d6c-a75d-33d243736b45", "rotation", out Binding InternalWorldOrientation_Rotation_value))
			{
				var clone = new Binding_a167402e36850884aa7ce3d374cd6c77_fad1d0ce_4867_4d6c_a75d_33d243736b45();
				InternalWorldOrientation_Rotation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldOrientation_Rotation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).rotation");
			}
			if (coherenceSync.TryGetBindingByGuid("880aae33-d8da-49c2-b9d4-e0c68eb7a369", "timePlanted", out Binding InternalFlower_id2_Flower_6689584802229134021_Flower_id2_Flower_6689584802229134021_timePlanted))
			{
				var clone = new Binding_a167402e36850884aa7ce3d374cd6c77_880aae33_d8da_49c2_b9d4_e0c68eb7a369();
				InternalFlower_id2_Flower_6689584802229134021_Flower_id2_Flower_6689584802229134021_timePlanted.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalFlower_id2_Flower_6689584802229134021_Flower_id2_Flower_6689584802229134021_timePlanted)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (Flower).timePlanted");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncFlower_id2] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
