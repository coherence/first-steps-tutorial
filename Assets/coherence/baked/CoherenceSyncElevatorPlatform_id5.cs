// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_ba50eecfd968a47c38959f27b05771b6_782a248a_50a4_4106_96ed_90467b4a4913 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			return update.value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_ba50eecfd968a47c38959f27b05771b6_4dbdefe9_69ef_421f_b0d0_490d9bbb8bc0 : FloatBinding
	{
		private FloatingPlatform CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (FloatingPlatform)UnityComponent;
		}
		public override string CoherenceComponentName => "ElevatorPlatform_id5_FloatingPlatform_5459872012036489579";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override float Value
		{
			get => (float)(System.Single)(CastedUnityComponent.timer);
			set => CastedUnityComponent.timer = (System.Single)(value);
		}

		protected override float ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (ElevatorPlatform_id5_FloatingPlatform_5459872012036489579)coherenceComponent;
			return update.timer;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (ElevatorPlatform_id5_FloatingPlatform_5459872012036489579)coherenceComponent;
			update.timer = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new ElevatorPlatform_id5_FloatingPlatform_5459872012036489579();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'ElevatorPlatform' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncElevatorPlatform_id5 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncElevatorPlatform_id5>();
			if (coherenceSync.TryGetBindingByGuid("782a248a-50a4-4106-96ed-90467b4a4913", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_ba50eecfd968a47c38959f27b05771b6_782a248a_50a4_4106_96ed_90467b4a4913();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
			if (coherenceSync.TryGetBindingByGuid("4dbdefe9-69ef-421f-b0d0-490d9bbb8bc0", "timer", out Binding InternalElevatorPlatform_id5_FloatingPlatform_5459872012036489579_ElevatorPlatform_id5_FloatingPlatform_5459872012036489579_timer))
			{
				var clone = new Binding_ba50eecfd968a47c38959f27b05771b6_4dbdefe9_69ef_421f_b0d0_490d9bbb8bc0();
				InternalElevatorPlatform_id5_FloatingPlatform_5459872012036489579_ElevatorPlatform_id5_FloatingPlatform_5459872012036489579_timer.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalElevatorPlatform_id5_FloatingPlatform_5459872012036489579_ElevatorPlatform_id5_FloatingPlatform_5459872012036489579_timer)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (FloatingPlatform).timer");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncElevatorPlatform_id5] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
