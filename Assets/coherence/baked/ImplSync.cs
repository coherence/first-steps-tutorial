// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using UnityEngine;
    using Coherence.Toolkit;
    using System;
    using Coherence.ProtocolDef;
    using System.Collections.Generic;
    using Log;
    using Logger = Log.Logger;
    using Coherence.Entities;
    using Coherence.SimulationFrame;
    
    public class CoherenceSyncImpl
    {
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        static void OnRuntimeMethodLoad()
        {
            Impl.ComponentNameFromTypeId = ComponentNameFromTypeId;
            Impl.CreateInitialComponents = CreateInitialComponents;
            Impl.ReceiveInternalCommand = ReceiveInternalCommand;
            Impl.CreateConnectedEntityUpdateInternal = CreateConnectedEntityUpdateInternal;
            Impl.GetConnectedEntityComponentIdInternal = GetConnectedEntityComponentIdInternal;
            Impl.UpdateTag = UpdateTag;
            Impl.RemoveTag = RemoveTag;
        }

        private static string ComponentNameFromTypeId(uint componentTypeId)
        {
            var componentName = Definition.ComponentNameForTypeId(componentTypeId);

            if (string.IsNullOrEmpty(componentName))
            {
                throw new Exception($"Unhandled component type id: {componentTypeId}");
            }

            return componentName;
        }

        private static ICoherenceComponentData[] CreateInitialComponents(ICoherenceSync self, string uuid, bool isFromGroup, AbsoluteSimulationFrame simFrame)
        {
            var comps = new List<ICoherenceComponentData>();
            comps.Add(new WorldPosition() 
            { 
                value = self.coherencePosition, 
                valueSimulationFrame = simFrame, 
                FieldsMask = 0b1, 
            });

            comps.Add(new AssetId() 
            { 
                value = self.CoherenceSyncConfig.ID.GetHashCode(), 
                isFromGroup = isFromGroup, 
                valueSimulationFrame = simFrame,
                isFromGroupSimulationFrame = simFrame,
                FieldsMask = 0b11, 
            });

            if (!string.IsNullOrEmpty(uuid))
            {
                comps.Add(new UniqueID() 
                { 
                    uuid = uuid, 
                    uuidSimulationFrame = simFrame, 
                    FieldsMask = 0b1, 
                });
            }

            if (self.LifetimeTypeConfig != CoherenceSync.LifetimeType.SessionBased)
            {
                comps.Add(new Persistence());
            }

            if (self.PreserveChildren)
            {
                comps.Add(new PreserveChildren());
            }

            return comps.ToArray();
        }

        /// <summary>Handles internal commands.</summary>
        /// <returns>
        ///     True if the commands was handled. False if the command was not an internal command and should be processed
        ///     further.
        /// </returns>
        private static bool ReceiveInternalCommand(CoherenceBridge.EventsToken events, IEntityCommand command,
            Logger logger)
        {
            switch (command)
            {
                case QuerySynced querySynced:
                    events.OnQuerySynced((querySynced.liveQuerySynced, querySynced.globalQuerySynced));
                    return true;
                default:
                    return false;
            }
        }

        private static ICoherenceComponentData CreateConnectedEntityUpdateInternal(Entity parentID, Vector3 newPos, Quaternion newRot, Vector3 newScale, AbsoluteSimulationFrame simFrame)
        {
            var comp = new ConnectedEntity()
            {
                value = parentID,
                pos = newPos,
                rot = newRot,
                scale = newScale,
                valueSimulationFrame = simFrame,
                posSimulationFrame = simFrame,
                rotSimulationFrame = simFrame,
                scaleSimulationFrame = simFrame,
                FieldsMask = 0b1111,
            };

            return comp;
        }

        private static uint GetConnectedEntityComponentIdInternal()
        {
            return Definition.InternalConnectedEntity;
        }

        private static void UpdateTag(IClient client, Entity liveQuery, string tag, AbsoluteSimulationFrame simFrame)
        {
            var components = new ICoherenceComponentData[]
            {
                new Tag 
                { 
                    tag = tag,
                    tagSimulationFrame = simFrame,
                    FieldsMask = 0b1
                }
            };

            client.UpdateComponents(liveQuery, components);
        }

        private static void RemoveTag(IClient client, Entity liveQuery)
        {
            client.RemoveComponents(liveQuery, new []{Definition.InternalTag});
        }
    }
}
